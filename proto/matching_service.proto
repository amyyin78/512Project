syntax = "proto3";
import "google/protobuf/empty.proto";

package matching;

// Service definition for the matching engine
service MatchingService {
    // Submit a new order to the matching engine
    rpc SubmitOrder (Order) returns (SubmitOrderResponse);
    
    // Cancel an existing order
    rpc CancelOrder (CancelOrderRequest) returns (CancelOrderResponse);
    
    // Stream of order book updates for synchronization
    rpc SyncOrderBook (SyncRequest) returns (stream OrderBookUpdate);
    
    // Get current state of order book
    rpc GetOrderBook (GetOrderBookRequest) returns (OrderBook);
    rpc SyncGlobalBestPrice(GlobalBestPriceUpdate) returns (google.protobuf.Empty);
}

// Order message represents a new order request
message Order {
    string order_id = 1;
    string symbol = 2;
    string side = 3;  // BUY or SELL
    double price = 4;
    double quantity = 5;
    string user_id = 6;
    int64 timestamp = 7;
}

// Response to order submission
message SubmitOrderResponse {
    string order_id = 1;
    repeated Fill fills = 2;
    string status = 3;
    string error_message = 4;
}

// Fill represents a matched trade
message Fill {
    string fill_id = 1;
    string buy_order_id = 2;
    string sell_order_id = 3;
    double price = 4;
    double quantity = 5;
    int64 timestamp = 6;
}

// Request to cancel an order
message CancelOrderRequest {
    string order_id = 1;
    string user_id = 2;
}

// Response to cancel request
message CancelOrderResponse {
    string order_id = 1;
    string status = 2;
    string error_message = 3;
}

// Request to sync order book
message SyncRequest {
    string symbol = 1;
    string engine_id = 2;
}

// Order book update message for synchronization
message OrderBookUpdate {
    string symbol = 1;
    repeated PriceLevel bids = 2;
    repeated PriceLevel asks = 3;
    int64 sequence_number = 4;
    string engine_id = 5;
}

// Price level in order book
message PriceLevel {
    double price = 1;
    double quantity = 2;
    int32 order_count = 3;
}

// Request to get current order book state
message GetOrderBookRequest {
    string symbol = 1;
}

// Complete order book state
message OrderBook {
    string symbol = 1;
    repeated PriceLevel bids = 2;
    repeated PriceLevel asks = 3;
    int64 timestamp = 4;
}

message GlobalBestPriceUpdate {
    string symbol = 1;
    double best_bid = 2;
    double best_ask = 3;
    string engine_id = 4;
}


